import Node from './Node.js';
<<<<<<< HEAD
import { nodeProxy } from '../tsl/TSLBase.js';

/**
 * This node can be used to define multiple outputs in a shader programs.
 *
 * @augments Node
 */
=======
import StructTypeNode from './StructTypeNode.js';
import { nodeProxy } from '../tsl/TSLBase.js';

>>>>>>> 1b08ea1de21880f3fba2a757661b8baef5d934b9
class OutputStructNode extends Node {

	static get type() {

		return 'OutputStructNode';

	}

<<<<<<< HEAD
	/**
	 * Constructs a new output struct node. The constructor can be invoked with an
	 * arbitrary number of nodes representing the members.
	 *
	 * @param {...Node} members - A parameter list of nodes.
	 */
=======
>>>>>>> 1b08ea1de21880f3fba2a757661b8baef5d934b9
	constructor( ...members ) {

		super();

<<<<<<< HEAD
		/**
		 * An array of nodes which defines the output.
		 *
		 * @type {Array<Node>}
		 */
		this.members = members;

		/**
		 * This flag can be used for type testing.
		 *
		 * @type {boolean}
		 * @readonly
		 * @default true
		 */
=======
		this.members = members;

>>>>>>> 1b08ea1de21880f3fba2a757661b8baef5d934b9
		this.isOutputStructNode = true;

	}

<<<<<<< HEAD
	getNodeType( builder ) {

		const properties = builder.getNodeProperties( this );

		if ( properties.membersLayout === undefined ) {

			const members = this.members;
			const membersLayout = [];

			for ( let i = 0; i < members.length; i ++ ) {

				const name = 'm' + i;
				const type = members[ i ].getNodeType( builder );

				membersLayout.push( { name, type, index: i } );

			}

			properties.membersLayout = membersLayout;
			properties.structType = builder.getOutputStructTypeFromNode( this, properties.membersLayout );

		}

		return properties.structType.name;

	}

	generate( builder ) {
=======
	setup( builder ) {

		super.setup( builder );

		const members = this.members;
		const types = [];

		for ( let i = 0; i < members.length; i ++ ) {

			types.push( members[ i ].getNodeType( builder ) );

		}

		this.nodeType = builder.getStructTypeFromNode( new StructTypeNode( types ) ).name;

	}

	generate( builder, output ) {
>>>>>>> 1b08ea1de21880f3fba2a757661b8baef5d934b9

		const propertyName = builder.getOutputStructName();
		const members = this.members;

		const structPrefix = propertyName !== '' ? propertyName + '.' : '';

		for ( let i = 0; i < members.length; i ++ ) {

<<<<<<< HEAD
			const snippet = members[ i ].build( builder );
=======
			const snippet = members[ i ].build( builder, output );
>>>>>>> 1b08ea1de21880f3fba2a757661b8baef5d934b9

			builder.addLineFlowCode( `${ structPrefix }m${ i } = ${ snippet }`, this );

		}

		return propertyName;

	}

}

export default OutputStructNode;

<<<<<<< HEAD
/**
 * TSL function for creating an output struct node.
 *
 * @tsl
 * @function
 * @param {...Node} members - A parameter list of nodes.
 * @returns {OutputStructNode}
 */
=======
>>>>>>> 1b08ea1de21880f3fba2a757661b8baef5d934b9
export const outputStruct = /*@__PURE__*/ nodeProxy( OutputStructNode );
